Info file gcc.info, produced by Makeinfo, -*- Text -*- from input
file gcc.texinfo.

This file documents the use and the internals of the GNU compiler.

Copyright (C) 1988, 1989 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled ``GNU General Public License'' is included
exactly as in the original, and provided that the entire resulting
derived work is distributed under the terms of a permission notice
identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled ``GNU General Public
License'' and this permission notice may be included in translations
approved by the Free Software Foundation instead of in the original
English.



File: gcc.info,  Node: Top,  Next: Copying,  Up: (DIR)

Introduction
************

This manual documents how to run, install and port the GNU C
compiler, as well as its new features and incompatibilities, and how
to report bugs.

* Menu:

* Copying::         GNU General Public License says
                     how you can copy and share GNU CC.
* Contributors::    People who have contributed to GNU CC.
* Options::         Command options supported by `gcc'.
* Installation::    How to configure, compile and install GNU CC.
* Trouble::         If you have trouble installing GNU CC.
* Incompatibilities:: Incompatibilities of GNU CC.
* Extensions::      GNU extensions to the C language.
* Bugs::            How to report bugs (if you want to get them fixed).
* Portability::     Goals of GNU CC's portability features.
* Interface::       Function-call interface of GNU CC output.
* Passes::          Order of passes, what they do, and what each file is for.
* RTL::             The intermediate representation that most passes work on.
* Machine Desc::    How to write machine description instruction patterns.
* Machine Macros::  How to write the machine description C macros.

 

File: gcc.info,  Node: Copying,  Next: Contributors,  Prev: Top,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                        Version 1, February 1989

     Copyright (C) 1989 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

 Preamble
=========

  The license agreements of most software companies try to keep users
at the mercy of those companies.  By contrast, our General Public
License is intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users. 
The General Public License applies to the Free Software Foundation's
software and to any other program whose authors commit to using it. 
You can use it for your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Specifically, the General Public License is designed to make
sure that you have the freedom to give away or sell copies of free
software, that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if
you distribute copies of the software, or if you modify it.

  For example, if you distribute copies of a such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must tell them their rights.

  We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to
copy, distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on,
we want its recipients to know that what they have is not the
original, so that any problems introduced by others will not reflect
on the original authors' reputations.

  The precise terms and conditions for copying, distribution and
modification follow.

                          TERMS AND CONDITIONS

  1. This License Agreement applies to any program or other work
     which contains a notice placed by the copyright holder saying it
     may be distributed under the terms of this General Public
     License.  The ``Program'', below, refers to any such program or
     work, and a ``work based on the Program'' means either the
     Program or any work containing the Program or a portion of it,
     either verbatim or with modifications.  Each licensee is
     addressed as ``you''.

  2. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this General Public License
     and to the absence of any warranty; and give any other
     recipients of the Program a copy of this General Public License
     along with the Program.  You may charge a fee for the physical
     act of transferring a copy.

  3. You may modify your copy or copies of the Program or any portion
     of it, and copy and distribute such modifications under the
     terms of Paragraph 1 above, provided that you also do the
     following:

        * cause the modified files to carry prominent notices stating
          that you changed the files and the date of any change; and

        * cause the whole of any work that you distribute or publish,
          that in whole or in part contains the Program or any part
          thereof, either with or without modifications, to be
          licensed at no charge to all third parties under the terms
          of this General Public License (except that you may choose
          to grant warranty protection to some or all third parties,
          at your option).

        * If the modified program normally reads commands
          interactively when run, you must cause it, when started
          running for such interactive use in the simplest and most
          usual way, to print or display an announcement including an
          appropriate copyright notice and a notice that there is no
          warranty (or else, saying that you provide a warranty) and
          that users may redistribute the program under these
          conditions, and telling the user how to view a copy of this
          General Public License.

        * You may charge a fee for the physical act of transferring a
          copy, and you may at your option offer warranty protection
          in exchange for a fee.

     Mere aggregation of another independent work with the Program
     (or its derivative) on a volume of a storage or distribution
     medium does not bring the other work under the scope of these
     terms.

  4. You may copy and distribute the Program (or a portion or
     derivative of it, under Paragraph 2) in object code or
     executable form under the terms of Paragraphs 1 and 2 above
     provided that you also do one of the following:

        * accompany it with the complete corresponding
          machine-readable source code, which must be distributed
          under the terms of Paragraphs 1 and 2 above; or,

        * accompany it with a written offer, valid for at least three
          years, to give any third party free (except for a nominal
          charge for the cost of distribution) a complete
          machine-readable copy of the corresponding source code, to
          be distributed under the terms of Paragraphs 1 and 2 above;
          or,

        * accompany it with the information you received as to where
          the corresponding source code may be obtained.  (This
          alternative is allowed only for noncommercial distribution
          and only if you received the program in object code or
          executable form alone.)

     Source code for a work means the preferred form of the work for
     making modifications to it.  For an executable file, complete
     source code means all the source code for all modules it
     contains; but, as a special exception, it need not include
     source code for modules which are standard libraries that
     accompany the operating system on which the executable file
     runs, or for standard header files or definitions files that
     accompany that operating system.

  5. You may not copy, modify, sublicense, distribute or transfer the
     Program except as expressly provided under this General Public
     License.  Any attempt otherwise to copy, modify, sublicense,
     distribute or transfer the Program is void, and will
     automatically terminate your rights to use the Program under
     this License.  However, parties who have received copies, or
     rights to use copies, from you under this General Public License
     will not have their licenses terminated so long as such parties
     remain in full compliance.

  6. By copying, distributing or modifying the Program (or any work
     based on the Program) you indicate your acceptance of this
     license to do so, and all its terms and conditions.

  7. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from
     the original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.

  8. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of the license which applies
     to it and ``any later version'', you have the option of
     following the terms and conditions either of that version or of
     any later version published by the Free Software Foundation.  If
     the Program does not specify a version number of the license,
     you may choose any version ever published by the Free Software
     Foundation.

  9. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to
     the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting
     the sharing and reuse of software generally.

                                   NO WARRANTY

 10. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS''
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE
     ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS
     WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE
     COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

 11. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
     OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
     YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH
     ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

Appendix: How to Apply These Terms to Your New Programs
=======================================================

  If you develop a new program, and you want it to be of the greatest
possible use to humanity, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 1, or (at your option)
     any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

 Also add information on how to contact you by electronic and paper
mail.

If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

 The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and
`show c'; they could even be mouse-clicks or menu items--whatever
suits your program.

You should also get your employer (if you work as a programmer) or
your school, if any, to sign a ``copyright disclaimer'' for the
program, if necessary.  Here a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the
     program `Gnomovision' (a program to direct compilers to make passes
     at assemblers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

That's all there is to it!



File: gcc.info,  Node: Contributors,  Next: Options,  Prev: Copying,  Up: Top

Contributors to GNU CC
**********************

In addition to Richard Stallman, several people have written parts of
GNU CC.

   * The idea of using RTL and some of the optimization ideas came
     from the U. of Arizona Portable Optimizer, written by Jack
     Davidson and Christopher Fraser.  See ``Register Allocation and
     Exhaustive Peephole Optimization'', Software Practice and
     Experience 14 (9), Sept. 1984, 857-866.

   * Paul Rubin wrote most of the preprocessor.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the Vax machine description.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Jim Wilson implemented loop strength reduction and some other
     loop optimizations.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the SONY NEWS machine.

   * Charles LaBrec contributed the support for the Integrated
     Solutions 68020 system.

   * Michael Tiemann of MCC wrote most of the description of the
     National Semiconductor 32000 series cpu.  He also wrote the code
     for inline function integration and for the SPARC cpu and
     Motorola 88000 cpu and part of the Sun FPA support.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Randy Smith finished the Sun FPA support.

   * Robert Brown implemented the support for Encore 32000 systems.

   * David Kashtan of SRI adapted GNU CC to the Vomit-Making System.

   * Alex Crain provided changes for the 3b1.

   * Greg Satz and Chris Hanson assisted in making GNU CC work on
     HP-UX for the 9000 series 300.

   * William Schelter did most of the work on the Intel 80386 support.

   * Christopher Smith did the port for Convex machines.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Alain Lichnewsky ported GNU CC to the MIPS cpu.



File: gcc.info,  Node: Options,  Next: Installation,  Prev: Contributors,  Up: Top

GNU CC Command Options
**********************

The GNU C compiler uses a command syntax much like the Unix C compiler.
The `gcc' program accepts options and file names as operands. 
Multiple single-letter options may *not* be grouped: `-dr' is very
different from `-d -r'.

When you invoke GNU CC, it normally does preprocessing, compilation,
assembly and linking.  File names which end in `.c' are taken as C
source to be preprocessed and compiled; file names ending in `.i' are
taken as preprocessor output to be compiled; compiler output files
plus any input files with names ending in `.s' are assembled; then
the resulting object files, plus any other input files, are linked
together to produce an executable.

Command options allow you to stop this process at an intermediate
stage.  For example, the `-c' option says not to run the linker. 
Then the output consists of object files output by the assembler.

Other command options are passed on to one stage of processing.  Some
options control the preprocessor and others the compiler itself.  Yet
other options control the assembler and linker; these are not
documented here, but you rarely need to use any of them.

Here are the options to control the overall compilation process,
including those that say whether to link, whether to assemble, and so
on.

`-o FILE'
     Place output in file FILE.  This applies regardless to whatever
     sort of output is being produced, whether it be an executable
     file, an object file, an assembler file or preprocessed C code.

     If `-o' is not specified, the default is to put an executable
     file in `a.out', the object file `SOURCE.c' in `SOURCE.o', an
     assembler file in `SOURCE.s', and preprocessed C on standard
     output.

`-c'
     Compile or assemble the source files, but do not link.  Produce
     object files with names made by replacing `.c' or `.s' with `.o'
     at the end of the input file names.  Do nothing at all for
     object files specified as input.

`-S'
     Compile into assembler code but do not assemble.  The assembler
     output file name is made by replacing `.c' with `.s' at the end
     of the input file name.  Do nothing at all for assembler source
     files or object files specified as input.

`-E'
     Run only the C preprocessor.  Preprocess all the C source files
     specified and output the results to standard output.

`-v'
     Compiler driver program prints the commands it executes as it
     runs the preprocessor, compiler proper, assembler and linker. 
     Some of these are directed to print their own version numbers.

`-pipe'
     Use pipes rather than temporary files for communication between
     the various stages of compilation.  This fails to work on some
     systems where the assembler is unable to read from a pipe; but
     the GNU assembler has no trouble.

`-BPREFIX'
     Compiler driver program tries PREFIX as a prefix for each
     program it tries to run.  These programs are `cpp', `cc1', `as'
     and `ld'.

     For each subprogram to be run, the compiler driver first tries
     the `-B' prefix, if any.  If that name is not found, or if `-B'
     was not specified, the driver tries two standard prefixes, which
     are `/usr/lib/gcc-' and `/usr/local/lib/gcc-'.  If neither of
     those results in a file name that is found, the unmodified
     program name is searched for using the directories specified in
     your `PATH' environment variable.

     The run-time support file `gnulib' is also searched for using
     the `-B' prefix, if needed.  If it is not found there, the two
     standard prefixes above are tried, and that is all.  The file is
     left out of the link if it is not found by those means.  Most of
     the time, on most machines, you can do without it.

     You can get a similar result from the environment variable;
     `GCC_EXEC_PREFIX' if it is defined, its value is used as a
     prefix in the same way.  If both the `-B' option and the
     `GCC_EXEC_PREFIX' variable are present, the `-B' option is used
     first and the environment variable value second.

These options control the details of C compilation itself.

`-ansi'
     Support all ANSI standard C programs.

     This turns off certain features of GNU C that are incompatible
     with ANSI C, such as the `asm', `inline' and `typeof' keywords,
     and predefined macros such as `unix' and `vax' that identify the
     type of system you are using.  It also enables the undesirable
     and rarely used ANSI trigraph feature.

     The alternate keywords `__asm', `__inline' and `__typeof'
     continue to work despite `-ansi'.  You would not want to use
     them in an ANSI C program, of course, but it useful to put them
     in header files that might be included in compilations done with
     `-ansi'.  Alternate predefined macros such as `__unix' and
     `__vax' are also available, with or without `-ansi'.

     The `-ansi' option does not cause non-ANSI programs to be
     rejected gratuitously.  For that, `-pedantic' is required in
     addition to `-ansi'.

     The macro `__STRICT_ANSI__' is predefined when the `-ansi'
     option is used.  Some header files may notice this macro and
     refrain from declaring certain functions or defining certain
     macros that the ANSI standard doesn't call for; this is to avoid
     interfering with any programs that might use these names for
     other things.

`-traditional'
     Attempt to support some aspects of traditional C compilers. 
     Specifically:

        * All `extern' declarations take effect globally even if they
          are written inside of a function definition.  This includes
          implicit declarations of functions.

        * The keywords `typeof', `inline', `signed', `const' and
          `volatile' are not recognized.

        * Comparisons between pointers and integers are always allowed.

        * Integer types `unsigned short' and `unsigned char' promote
          to `unsigned int'.

        * Out-of-range floating point literals are not an error.

        * All automatic variables not declared `register' are
          preserved by `longjmp'.  Ordinarily, GNU C follows ANSI C:
          automatic variables not declared `volatile' may be clobbered.

        * In the preprocessor, comments convert to nothing at all,
          rather than to a space.  This allows traditional token
          concatenation.

        * In the preprocessor, macro arguments are recognized within
          string constants in a macro definition (and their values
          are stringified, though without additional quote marks,
          when they appear in such a context).  The preprocessor
          always considers a string constant to end at a newline.

        * The predefined macro `__STDC__' is not defined when you use
          `-traditional', but `__GNUC__' is (since the GNU extensions
          which `__GNUC__' indicates are not affected by
          `-traditional').  If you need to write header files that
          work differently depending on whether `-traditional' is in
          use, by testing both of these predefined macros you can
          distinguish four situations: GNU C, traditional GNU C,
          other ANSI C compilers, and other old C compilers.

`-O'
     Optimize.  Optimizing compilation takes somewhat more time, and
     a lot more memory for a large function.

     Without `-O', the compiler's goal is to reduce the cost of
     compilation and to make debugging produce the expected results. 
     Statements are independent: if you stop the program with a
     breakpoint between statements, you can then assign a new value
     to any variable or change the program counter to any other
     statement in the function and get exactly the results you would
     expect from the source code.

     Without `-O', only variables declared `register' are allocated
     in registers.  The resulting compiled code is a little worse
     than produced by PCC without `-O'.

     With `-O', the compiler tries to reduce code size and execution
     time.

     Some of the `-f' options described below turn specific kinds of
     optimization on or off.

`-g'
     Produce debugging information in the operating system's native
     format (for DBX or SDB).  GDB also can work with this debugging
     information.

     Unlike most other C compilers, GNU CC allows you to use `-g'
     with `-O'.  The shortcuts taken by optimized code may
     occasionally produce surprising results: some variables you
     declared may not exist at all; flow of control may briefly move
     where you did not expect it; some statements may not be executed
     because they compute constant results or their values were
     already at hand; some statements may execute in different places
     because they were moved out of loops.  Nevertheless it proves
     possible to debug optimized output.  This makes it reasonable to
     use the optimizer for programs that might have bugs.

`-gg'
     Produce debugging information in GDB's own format.  This
     requires the GNU assembler and linker in order to work.

     This feature will probably be eliminated.  It was intended to
     enable GDB to read the symbol table faster, but it doesn't
     result in enough of a speedup to be worth the larger object
     files and executables.  We are working on other ways of making
     GDB start even faster, which work with DBX format debugging
     information and could be made to work with SDB format.

`-w'
     Inhibit all warning messages.

`-W'
     Print extra warning messages for these events:

        * An automatic variable is used without first being
          initialized.

          These warnings are possible only in optimizing compilation,
          because they require data flow information that is computed
          only when optimizing.  If you don't specify `-O', you
          simply won't get these warnings.

          These warnings occur only for variables that are candidates
          for register allocation.  Therefore, they do not occur for
          a variable that is declared `volatile', or whose address is
          taken, or whose size is other than 1, 2, 4 or 8 bytes. 
          Also, they do not occur for structures, unions or arrays,
          even when they are in registers.

          Note that there may be no warning about a variable that is
          used only to compute a value that itself is never used,
          because such computations may be deleted by data flow
          analysis before the warnings are printed.

          These warnings are made optional because GNU CC is not
          smart enough to see all the reasons why the code might be
          correct despite appearing to have an error.  Here is one
          example of how this can happen:

               {
                 int x;
                 switch (y)
                   {
                   case 1: x = 1;
                     break;
                   case 2: x = 4;
                     break;
                   case 3: x = 5;
                   }
                 foo (x);
               }

          If the value of `y' is always 1, 2 or 3, then `x' is always
          initialized, but GNU CC doesn't know this.  Here is another
          common case:

               {
                 int save_y;
                 if (change_y) save_y = y, y = new_y;
                 ...
                 if (change_y) y = save_y;
               }

          This has no bug because `save_y' is used only if it is set.

          Some spurious warnings can be avoided if you declare as
          `volatile' all the functions you use that never return. 
          *Note Function Attributes::.

        * A nonvolatile automatic variable might be changed by a call
          to `longjmp'.  These warnings as well are possible only in
          optimizing compilation.

          The compiler sees only the calls to `setjmp'.  It cannot
          know where `longjmp' will be called; in fact, a signal
          handler could call it at any point in the code.  As a
          result, you may get a warning even when there is in fact no
          problem because `longjmp' cannot in fact be called at the
          place which would cause a problem.

        * A function can return either with or without a value. 
          (Falling off the end of the function body is considered
          returning without a value.)  For example, this function
          would evoke such a warning:

               foo (a)
               {
                 if (a > 0)
                   return a;
               }

          Spurious warnings can occur because GNU CC does not realize
          that certain functions (including `abort' and `longjmp')
          will never return.

        * An expression-statement contains no side effects.

     In the future, other useful warnings may also be enabled by this
     option.

`-Wimplicit'
     Warn whenever a function is implicitly declared.

`-Wreturn-type'
     Warn whenever a function is defined with a return-type that
     defaults to `int'.  Also warn about any `return' statement with
     no return-value in a function whose return-type is not `void'.

`-Wunused'
     Warn whenever a local variable is unused aside from its
     declaration, and whenever a function is declared static but
     never defined.

`-Wshadow'
     Warn whenever a local variable shadows another local variable.

`-Wid-clash-LEN'
     Warn whenever two distinct identifiers match in the first LEN
     characters.  This may help you prepare a program that will
     compile with certain obsolete, brain-damaged compilers.

`-Wswitch'
     Warn whenever a `switch' statement has an index of enumeral type
     and lacks a `case' for one or more of the named codes of that
     enumeration.  (The presence of a `default' label prevents this
     warning.)  `case' labels outside the enumeration range also
     provoke warnings when this option is used.

`-Wcomment'
     Warn whenever a comment-start sequence `/*' appears in a comment.

`-Wtrigraphs'
     Warn if any trigraphs are encountered (assuming they are enabled).

`-Wall'
     All of the above `-W' options combined.

`-Wcast-qual'
     Warn whenever a pointer is cast so as to remove a type qualifier
     from the target type.  For example, warn if a `const char *' is
     cast to an ordinary `char *'.

`-Wwrite-strings'
     Give string constants the type `const char[LENGTH]' so that
     copying the address of one into a non-`const' `char *' pointer
     will get a warning.  These warnings will help you find at
     compile time code that can try to write into a string constant,
     but only if you have been very careful about using `const' in
     declarations and prototypes.  Otherwise, it will just be a
     nuisance; this is why we did not make `-Wall' request these
     warnings.

`-p'
     Generate extra code to write profile information suitable for
     the analysis program `prof'.

`-pg'
     Generate extra code to write profile information suitable for
     the analysis program `gprof'.

`-a'
     Generate extra code to write profile information for basic
     blocks, suitable for the analysis program `tcov'.  Eventually
     GNU `gprof' should be extended to process this data.

`-lLIBRARY'
     Search a standard list of directories for a library named
     LIBRARY, which is actually a file named `libLIBRARY.a'.  The
     linker uses this file as if it had been specified precisely by
     name.

     The directories searched include several standard system
     directories plus any that you specify with `-L'.

     Normally the files found this way are library files--archive
     files whose members are object files.  The linker handles an
     archive file by scanning through it for members which define
     symbols that have so far been referenced but not defined.  But
     if the file that is found is an ordinary object file, it is
     linked in the usual fashion.  The only difference between using
     an `-l' option and specifying a file name is that `-l' searches
     several directories.

`-LDIR'
     Add directory DIR to the list of directories to be searched for
     `-l'.

`-nostdlib'
     Don't use the standard system libraries and startup files when
     linking.  Only the files you specify (plus `gnulib') will be
     passed to the linker.

`-mMACHINESPEC'
     Machine-dependent option specifying something about the type of
     target machine.  These options are defined by the macro
     `TARGET_SWITCHES' in the machine description.  The default for
     the options is also defined by that macro, which enables you to
     change the defaults.

     These are the `-m' options defined in the 68000 machine
     description:

    `-m68020'
    `-mc68020'
          Generate output for a 68020 (rather than a 68000).  This is
          the default if you use the unmodified sources.

    `-m68000'
    `-mc68000'
          Generate output for a 68000 (rather than a 68020).

    `-m68881'
          Generate output containing 68881 instructions for floating
          point.  This is the default if you use the unmodified
          sources.

    `-mfpa'
          Generate output containing Sun FPA instructions for
          floating point.

    `-msoft-float'
          Generate output containing library calls for floating point.

    `-mshort'
          Consider type `int' to be 16 bits wide, like `short int'.

    `-mnobitfield'
          Do not use the bit-field instructions.  `-m68000' implies
          `-mnobitfield'.

    `-mbitfield'
          Do use the bit-field instructions.  `-m68020' implies
          `-mbitfield'.  This is the default if you use the
          unmodified sources.

    `-mrtd'
          Use a different function-calling convention, in which
          functions that take a fixed number of arguments return with
          the `rtd' instruction, which pops their arguments while
          returning.  This saves one instruction in the caller since
          there is no need to pop the arguments there.

          This calling convention is incompatible with the one
          normally used on Unix, so you cannot use it if you need to
          call libraries compiled with the Unix compiler.

          Also, you must provide function prototypes for all
          functions that take variable numbers of arguments
          (including `printf'); otherwise incorrect code will be
          generated for calls to those functions.

          In addition, seriously incorrect code will result if you
          call a function with too many arguments.  (Normally, extra
          arguments are harmlessly ignored.)

          The `rtd' instruction is supported by the 68010 and 68020
          processors, but not by the 68000.

     These `-m' options are defined in the Vax machine description:

    `-munix'
          Do not output certain jump instructions (`aobleq' and so
          on) that the Unix assembler for the Vax cannot handle
          across long ranges.

    `-mgnu'
          Do output those jump instructions, on the assumption that
          you will assemble with the GNU assembler.

    `-mg'
          Output code for g-format floating point numbers instead of
          d-format.

     These `-m' switches are supported on the Sparc:

    `-mfpu'
          Generate output containing floating point instructions. 
          This is the default if you use the unmodified sources.

    `-msoft-float'
          Generate output containing library calls for floating point.

    `-mno-epilogue'
          Generate separate return instructions for `return'
          statements.  This has both advantages and disadvantages; I
          don't recall what they are.

     These `-m' options are defined in the Convex machine description:

    `-mc1'
          Generate output for a C1.  This is the default when the
          compiler is configured for a C1.

    `-mc2'
          Generate output for a C2.  This is the default when the
          compiler is configured for a C2.

    `-margcount'
          Generate code which puts an argument count in the word
          preceding each argument list.  Some nonportable Convex and
          Vax programs need this word.  (Debuggers don't; this info
          is in the symbol table.)

    `-mnoargcount'
          Omit the argument count word.  This is the default if you
          use the unmodified sources.

`-fFLAG'
     Specify machine-independent flags.  Most flags have both
     positive and negative forms; the negative form of `-ffoo' would
     be `-fno-foo'.  In the table below, only one of the forms is
     listed--the one which is not the default.  You can figure out
     the other form by either removing `no-' or adding it.

    `-fpcc-struct-return'
          Use the same convention for returning `struct' and `union'
          values that is used by the usual C compiler on your system.
          This convention is less efficient for small structures, and
          on many machines it fails to be reentrant; but it has the
          advantage of allowing intercallability between GCC-compiled
          code and PCC-compiled code.

    `-ffloat-store'
          Do not store floating-point variables in registers.  This
          prevents undesirable excess precision on machines such as
          the 68000 where the floating registers (of the 68881) keep
          more precision than a `double' is supposed to have.

          For most programs, the excess precision does only good, but
          a few programs rely on the precise definition of IEEE
          floating point.  Use `-ffloat-store' for such programs.

    `-fno-asm'
          Do not recognize `asm', `inline' or `typeof' as a keyword. 
          These words may then be used as identifiers.  You can use
          `__asm', `__inline' and `__typeof' instead.

    `-fno-defer-pop'
          Always pop the arguments to each function call as soon as
          that function returns.  Normally the compiler (when
          optimizing) lets arguments accumulate on the stack for
          several function calls and pops them all at once.

    `-fstrength-reduce'
          Perform the optimizations of loop strength reduction and
          elimination of iteration variables.

    `-fcombine-regs'
          Allow the combine pass to combine an instruction that
          copies one register into another.  This might or might not
          produce better code when used in addition to `-O'.  I am
          interested in hearing about the difference this makes.

    `-fforce-mem'
          Force memory operands to be copied into registers before
          doing arithmetic on them.  This may produce better code by
          making all memory references potential common
          subexpressions.  When they are not common subexpressions,
          instruction combination should eliminate the separate
          register-load.  I am interested in hearing about the
          difference this makes.

    `-fforce-addr'
          Force memory address constants to be copied into registers
          before doing arithmetic on them.  This may produce better
          code just as `-fforce-mem' may.  I am interested in hearing
          about the difference this makes.

    `-fomit-frame-pointer'
          Don't keep the frame pointer in a register for functions
          that don't need one.  This avoids the instructions to save,
          set up and restore frame pointers; it also makes an extra
          register available in many functions.  *It also makes
          debugging impossible.*

          On some machines, such as the Vax, this flag has no effect,
          because the standard calling sequence automatically handles
          the frame pointer and nothing is saved by pretending it
          doesn't exist.  The machine-description macro
          `FRAME_POINTER_REQUIRED' controls whether a target machine
          supports this flag.  *Note Registers::.

    `-finline-functions'
          Integrate all simple functions into their callers.  The
          compiler heuristically decides which functions are simple
          enough to be worth integrating in this way.

          If all calls to a given function are integrated, and the
          function is declared `static', then the function is
          normally not output as assembler code in its own right.

    `-fcaller-saves'
          Enable values to be allocated in registers that will be
          clobbered by function calls, by emitting extra instructions
          to save and restore the registers around such calls.  Such
          allocation is done only when it seems to result in better
          code than would otherwise be produced.

          This option is enabled by default on certain machines,
          usually those which have no call-preserved registers to use
          instead.

    `-fkeep-inline-functions'
          Even if all calls to a given function are integrated, and
          the function is declared `static', nevertheless output a
          separate run-time callable version of the function.

    `-fwritable-strings'
          Store string constants in the writable data segment and
          don't uniquize them.  This is for compatibility with old
          programs which assume they can write into string constants.
          Writing into string constants is a very bad idea;
          ``constants'' should be constant.

    `-fcond-mismatch'
          Allow conditional expressions with mismatched types in the
          second and third arguments.  The value of such an
          expression is void.

    `-fno-function-cse'
          Do not put function addresses in registers; make each
          instruction that calls a constant function contain the
          function's address explicitly.

          This option results in less efficient code, but some
          strange hacks that alter the assembler output may be
          confused by the optimizations performed when this option is
          not used.

    `-fvolatile'
          Consider all memory references through pointers to be
          volatile.

    `-fshared-data'
          Requests that the data and non-`const' variables of this
          compilation be shared data rather than private data.  The
          distinction makes sense only on certain operating systems,
          where shared data is shared between processes running the
          same program, while private data exists in one copy per
          process.

    `-funsigned-char'
          Let the type `char' be the unsigned, like `unsigned char'.

          Each kind of machine has a default for what `char' should
          be.  It is either like `unsigned char' by default or like
          `signed char' by default.  (Actually, at present, the
          default is always signed.)

          The type `char' is always a distinct type from either
          `signed char' or `unsigned char', even though its behavior
          is always just like one of those two.

          Note that this is equivalent to `-fno-signed-char', which
          is the negative form of `-fsigned-char'.

    `-fsigned-char'
          Let the type `char' be signed, like `signed char'.

          Note that this is equivalent to `-fno-unsigned-char', which
          is the negative form of `-funsigned-char'.

    `-ffixed-REG'
          Treat the register named REG as a fixed register; generated
          code should never refer to it (except perhaps as a stack
          pointer, frame pointer or in some other fixed role).

          REG must be the name of a register.  The register names
          accepted are machine-specific and are defined in the
          `REGISTER_NAMES' macro in the machine description macro file.

          This flag does not have a negative form, because it
          specifies a three-way choice.

    `-fcall-used-REG'
          Treat the register named REG as an allocatable register
          that is clobbered by function calls.  It may be allocated
          for temporaries or variables that do not live across a call.
          Functions compiled this way will not save and restore the
          register REG.

          Use of this flag for a register that has a fixed pervasive
          role in the machine's execution model, such as the stack
          pointer or frame pointer, will produce disastrous results.

          This flag does not have a negative form, because it
          specifies a three-way choice.

    `-fcall-saved-REG'
          Treat the register named REG as an allocatable register
          saved by functions.  It may be allocated even for
          temporaries or variables that live across a call. 
          Functions compiled this way will save and restore the
          register REG if they use it.

          Use of this flag for a register that has a fixed pervasive
          role in the machine's execution model, such as the stack
          pointer or frame pointer, will produce disastrous results.

          A different sort of disaster will result from the use of
          this flag for a register in which function values may be
          returned.

          This flag does not have a negative form, because it
          specifies a three-way choice.

`-dLETTERS'
     Says to make debugging dumps at times specified by LETTERS. 
     Here are the possible letters:

    `r'
          Dump after RTL generation.

    `j'
          Dump after first jump optimization.

    `J'
          Dump after last jump optimization.

    `s'
          Dump after CSE (including the jump optimization that
          sometimes follows CSE).

    `L'
          Dump after loop optimization.

    `f'
          Dump after flow analysis.

    `c'
          Dump after instruction combination.

    `l'
          Dump after local register allocation.

    `g'
          Dump after global register allocation.

    `m'
          Print statistics on memory usage, at the end of the run.

`-pedantic'
     Issue all the warnings demanded by strict ANSI standard C;
     reject all programs that use forbidden extensions.

     Valid ANSI standard C programs should compile properly with or
     without this option (though a rare few will require `-ansi'). 
     However, without this option, certain GNU extensions and
     traditional C features are supported as well.  With this option,
     they are rejected.  There is no reason to use this option; it
     exists only to satisfy pedants.

`-static'
     On Suns running version 4, this prevents linking with the shared
     libraries.  (`-g' has the same effect.)

These options control the C preprocessor, which is run on each C
source file before actual compilation.  If you use the `-E' option,
nothing is done except C preprocessing.  Some of these options make
sense only together with `-E' because they request preprocessor
output that is not suitable for actual compilation.

`-C'
     Tell the preprocessor not to discard comments.  Used with the
     `-E' option.

`-IDIR'
     Search directory DIR for include files.

`-I-'
     Any directories specified with `-I' options before the `-I-'
     option are searched only for the case of `#include "FILE"'; they
     are not searched for `#include <FILE>'.

     If additional directories are specified with `-I' options after
     the `-I-', these directories are searched for all `#include'
     directives.  (Ordinarily *all* `-I' directories are used this
     way.)

     In addition, the `-I-' option inhibits the use of the current
     directory as the first search directory for `#include "FILE"'. 
     Therefore, the current directory is searched only if it is
     requested explicitly with `-I.'.  Specifying both `-I-' and
     `-I.' allows you to control precisely which directories are
     searched before the current one and which are searched after.

`-nostdinc'
     Do not search the standard system directories for header files. 
     Only the directories you have specified with `-I' options (and
     the current directory, if appropriate) are searched.

     Between `-nostdinc' and `-I-', you can eliminate all directories
     from the search path except those you specify.

`-M'
     Tell the preprocessor to output a rule suitable for `make'
     describing the dependencies of each source file.  For each
     source file, the preprocessor outputs one `make'-rule whose
     target is the object file name for that source file and whose
     dependencies are all the files `#include'd in it.  This rule may
     be a single line or may be continued with `\'-newline if it is
     long.

     `-M' implies `-E'.

`-MM'
     Like `-M' but the output mentions only the user-header files
     included with `#include "FILE"'.  System header files included
     with `#include <FILE>' are omitted.

     `-MM' implies `-E'.

`-DMACRO'
     Define macro MACRO with the empty string as its definition.

`-DMACRO=DEFN'
     Define macro MACRO as DEFN.

`-UMACRO'
     Undefine macro MACRO.

`-trigraphs'
     Support ANSI C trigraphs.  You don't want to know about this
     brain-damage.  The `-ansi' option also has this effect.


